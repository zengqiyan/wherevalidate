/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package com.zqy.wherevalidate;
import java.io.StringReader;
import java.io.PrintStream ;
@SuppressWarnings("all")
class SqlParser implements SqlParserConstants {
public static void main( String[] args )
throws ParseException, TokenMgrError, NumberFormatException {
StringReader reader = new StringReader(" 1 in (1,2,3) and 'c' in ('a','c') and 'abcdsadsa' like '%abc%'");
SqlParser parser = new SqlParser( reader );
System.out.println(parser.start());
}
boolean result = false;

//statrt主方法调�?
  final public boolean start() throws ParseException, NumberFormatException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case OPEN_PAR:
      case NUMBER:
      case STRING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
		result = orExpression();
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
  {if (true) return result;}
    }
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  final public boolean orExpression() throws ParseException, Exception {
boolean boo1=true;
boolean boo2=false;
    boo1 = andExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      boo2 = andExpression();
 boo1=boo1 || boo2;
    }
 {if (true) return boo1 || boo2;}
    throw new Error("Missing return statement in function");
  }

  final public boolean andExpression() throws ParseException, Exception {
boolean boo1=true;
boolean boo2=true;
boolean result=false;
    boo1 = judgmentExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      boo2 = judgmentExpression();
 boo1=boo1 && boo2;
    }
 {if (true) return boo1 && boo2;}
    throw new Error("Missing return statement in function");
  }

  final public boolean judgmentExpression() throws ParseException, Exception {
        double d=0.0;
        double d1=0.0;
        String str1;
        String str2;
        boolean result=false;
        boolean boo = false;
        String[] ins=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NUMBER:
      d = arithmetic();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) == 0);
        break;
      case NO_EQUAL:
        jj_consume_token(NO_EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) != 0);
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) < 0);
        break;
      case LESS_OR_EQUAL:
        jj_consume_token(LESS_OR_EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) <= 0);
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) > 0);
        break;
      case GREATER_OR_EQUAL:
        jj_consume_token(GREATER_OR_EQUAL);
        d1 = arithmetic();
 result =(Double.compare(d, d1) >= 0);
        break;
      case IN:
        ins = getIn();
 for(int i=0;i<ins.length;i++){
                if(Double.compare(d, Double.parseDouble(ins[i].trim())) == 0){
                        result=true;
                        break;
                };
        }
        break;
      case NOT:
        jj_consume_token(NOT);
        ins = getIn();
    result=true;
        for(int i=0;i<ins.length;i++){
                if(Double.compare(d, Double.parseDouble(ins[i].trim())) == 0){
                        result=false;
                        break;
                };
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
 {if (true) return result;}
      break;
    case STRING:
      str1 = getStr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        str2 = getStr();
 result=str1.equals(str2);
        break;
      case NO_EQUAL:
        jj_consume_token(NO_EQUAL);
        str2 = getStr();
 result=!str1.equals(str2);
        break;
      case IN:
        ins = getIn();
 for(int i=0;i<ins.length;i++){
                if(ins[i].trim().equals(str1)){
                        result=true;
                        break;
                };
        }
        break;
      case NOT:
        jj_consume_token(NOT);
        ins = getIn();
        result=true;
        for(int i=0;i<ins.length;i++){
                if(ins[i].trim().equals(str1)){
                        result=false;
                        break;
                };
        }
        break;
      case LIKE:
        jj_consume_token(LIKE);
        str2 = getStr();
result= compareLike(str1,str2);
        break;
      case NOT_LIKE:
        jj_consume_token(NOT_LIKE);
        str2 = getStr();
result= !compareLike(str1,str2);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
 {if (true) return result;}
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      result = orExpression();
      jj_consume_token(CLOSE_PAR);
 {if (true) return result;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean test() throws ParseException, NumberFormatException {
boolean b=false;
    jj_consume_token(OPEN_PAR);
    try {
		b = orExpression();
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    jj_consume_token(CLOSE_PAR);
  {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

//四则运算
  final public double arithmetic() throws ParseException, NumberFormatException {
double i;
double value;
    //加法
    value = term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        i = term();
  value+=i;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        i = term();
  value -= i;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double term() throws ParseException, NumberFormatException {
double i;
double value;
    value = primary();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        i = primary();
  value *= i;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        i = primary();
  value /= i;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

//获取数字
  final public double primary() throws ParseException, NumberFormatException {
Token t;
double d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
  {if (true) return Double.parseDouble(t.image);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      d = primary();
  {if (true) return -d;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//获取字符�?
  final public String getStr() throws ParseException, Exception {
Token t;
    t = jj_consume_token(STRING);
  {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

//获取in里的内容
  final public String[] getIn() throws ParseException, Exception {
Token t;
String in="";
String[] ins=null;
    t = jj_consume_token(IN);
 in = t.image.toString();
 in = in.substring(in.indexOf("(")+1, in.indexOf(")"));
 ins= in.split(",");
  {if (true) return ins;}
    throw new Error("Missing return statement in function");
  }

  final public boolean compareLike(String str1,String str2) throws ParseException, Exception {
boolean boo =true;
if(str2.startsWith("'%") && str2.endsWith("%'")){
        str1 = str1.substring(1, str1.length()-1);
        str2 = str2.substring(2,str2.length()-2);
        boo = str1.contains(str2);
        }else if(str2.startsWith("'%")){
        str1 = str1.substring(1, str1.length());
        str2 = str2.substring(2,str2.length());
        boo =  str1.endsWith(str2);
        }else if(str2.endsWith("%'")){
        str1 = str1.substring(1, str1.length()-1);
        str2 = str2.substring(1,str2.length()-2);
        boo =  str1.startsWith(str2);
    }else{
    boo=false;
    }
 {if (true) return boo;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x142400,0x10000,0x8000,0x4201f8,0x1c20108,0x142400,0x600,0x600,0x1800,0x1800,0x40400,};
   }

  /** Constructor with InputStream. */
  public SqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
