/* Generated By:JavaCC: Do not edit this line. SqlParserTokenManager.java */
package com.zqy.wherevalidate;
import java.io.StringReader;
import java.io.PrintStream ;

/** Token Manager. */
@SuppressWarnings("all")
public class SqlParserTokenManager implements SqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 116;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 1, 116);
      case 40:
         return jjStopAtPos(0, 13);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStopAtPos(0, 11);
      case 43:
         return jjStopAtPos(0, 9);
      case 45:
         return jjStopAtPos(0, 10);
      case 47:
         return jjStopAtPos(0, 12);
      case 60:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x140L);
      case 61:
         return jjStopAtPos(0, 3);
      case 62:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x80L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 173;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 32)
                     jjAddStates(5, 19);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(102, 104);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 40)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddStates(20, 23);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 44)
                     jjCheckNAdd(8);
                  break;
               case 12:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
               case 47:
               case 58:
                  if (curChar == 39)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 41 && kind > 22)
                     kind = 22;
                  break;
               case 16:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 14);
                  break;
               case 18:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(20, 23);
                  break;
               case 20:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(21, 36);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(23, 20);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 35);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 22);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 15);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 46)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 15);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
               case 78:
               case 98:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 15);
                  break;
               case 39:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 40)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if (curChar == 39)
                     jjCheckNAddStates(36, 39);
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if (curChar == 44)
                     jjCheckNAdd(41);
                  break;
               case 45:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 43);
                  break;
               case 46:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 47);
                  break;
               case 50:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if (curChar == 40)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if (curChar == 39)
                     jjCheckNAddStates(40, 43);
                  break;
               case 53:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if (curChar == 44)
                     jjCheckNAdd(52);
                  break;
               case 56:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 57:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 58);
                  break;
               case 61:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(63, 66);
                  break;
               case 63:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(64, 79);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(66, 63);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 55);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 46)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 65);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(65);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 15);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 15);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 15);
                  break;
               case 81:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(83, 86);
                  break;
               case 83:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(84, 99);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(86, 83);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 67);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 85);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 46)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 85);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar == 46)
                     jjCheckNAdd(85);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(93, 15);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 95:
                  if (curChar == 46)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 15);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 15);
                  break;
               case 101:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(102, 104);
                  break;
               case 102:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if (curChar == 39 && kind > 20)
                     kind = 20;
                  break;
               case 104:
                  if ((0x3000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 103);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAddStates(0, 4);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if (curChar == 46)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar == 46 && kind > 18)
                     kind = 18;
                  break;
               case 112:
                  if (curChar == 32)
                     jjAddStates(5, 19);
                  break;
               case 113:
                  if (curChar == 32 && kind > 15)
                     kind = 15;
                  break;
               case 123:
                  if (curChar == 32 && kind > 16)
                     kind = 16;
                  break;
               case 138:
                  if (curChar == 32 && kind > 23)
                     kind = 23;
                  break;
               case 152:
                  if (curChar == 32)
                     jjAddStates(68, 70);
                  break;
               case 153:
                  if (curChar == 32 && kind > 24)
                     kind = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 116:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 171;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 166;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 149;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 145;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 128;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 126;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 118;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 169;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 141;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 124;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 115;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 136;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 0:
                  if (curChar == 73)
                     jjAddStates(71, 74);
                  else if (curChar == 105)
                     jjAddStates(75, 76);
                  break;
               case 5:
                  if (curChar == 105)
                     jjAddStates(75, 76);
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 14);
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 38:
                  if (curChar == 73)
                     jjAddStates(71, 74);
                  break;
               case 42:
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 43);
                  break;
               case 46:
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(48, 47);
                  break;
               case 49:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 53:
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 57:
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 58);
                  break;
               case 60:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 80:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 100:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 102:
                  jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(104, 103);
                  break;
               case 114:
                  if (curChar == 68)
                     jjCheckNAdd(113);
                  break;
               case 115:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
               case 120:
                  if (curChar == 100)
                     jjCheckNAdd(113);
                  break;
               case 118:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 121:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 124:
                  if (curChar == 82)
                     jjCheckNAdd(123);
                  break;
               case 125:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
               case 128:
                  if (curChar == 114)
                     jjCheckNAdd(123);
                  break;
               case 127:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 129:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 116 && kind > 17)
                     kind = 17;
                  break;
               case 131:
               case 136:
                  if (curChar == 111)
                     jjCheckNAdd(130);
                  break;
               case 132:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 84 && kind > 17)
                     kind = 17;
                  break;
               case 134:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 137:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if (curChar == 69)
                     jjCheckNAdd(138);
                  break;
               case 140:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
               case 147:
                  if (curChar == 101)
                     jjCheckNAdd(138);
                  break;
               case 144:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 148:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 116)
                     jjCheckNAdd(152);
                  break;
               case 154:
                  if (curChar == 69)
                     jjCheckNAdd(153);
                  break;
               case 155:
                  if (curChar == 75)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
               case 162:
                  if (curChar == 101)
                     jjCheckNAdd(153);
                  break;
               case 159:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
               case 171:
                  if (curChar == 111)
                     jjCheckNAdd(151);
                  break;
               case 167:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 84)
                     jjCheckNAdd(152);
                  break;
               case 169:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 12:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(16, 14);
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 45:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(45, 43);
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 47);
                  break;
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(56, 54);
                  break;
               case 57:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(59, 58);
                  break;
               case 102:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(104, 103);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 173 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   106, 107, 108, 110, 111, 116, 119, 122, 125, 127, 129, 132, 135, 137, 142, 146, 
   150, 167, 170, 172, 9, 12, 13, 16, 24, 25, 26, 28, 29, 22, 30, 31, 
   32, 34, 35, 15, 42, 45, 46, 48, 53, 56, 57, 59, 67, 68, 69, 71, 
   72, 65, 73, 74, 75, 77, 78, 15, 87, 88, 89, 91, 92, 85, 93, 94, 
   95, 97, 98, 15, 157, 161, 165, 49, 60, 80, 100, 17, 37, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\75", "\74", "\76", "\74\75", "\76\75", "\74\76", "\53", 
"\55", "\52", "\57", "\50", "\51", null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1d7fffdL, 
};
static final long[] jjtoSkip = {
   0x2L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[173];
private final int[] jjstateSet = new int[346];
protected char curChar;
/** Constructor. */
public SqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 173; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
